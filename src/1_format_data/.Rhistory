}
merged <- c(recorded[!(recorded %in% absent)], corrected)
if (length(merged) < 1) {
return(NA)
}
return(str_c(merged, collapse = '; '))
}, vectorize.args = c('recorded', 'absent', 'corrected'))
manually_corrected_species <- read_csv('../../data/manually_corrected_hosts_and_microsp.csv') %>%
select(species, species_cleaned, microsp_not_in_text, microsp_not_in_text_corrected,
title_abstract, hosts_cleaned, hosts_not_in_text,
hosts_not_in_text_corrected) %>%
mutate(species_final = merge_recorded_and_corrected(species_cleaned,
microsp_not_in_text,
microsp_not_in_text_corrected),
hosts_final = ifelse(!is.na(microsp_not_in_text),
microsp_not_in_text_corrected,
species_cleaned))
view(manually_corrected_species)
view(manually_corrected_species$species_final)
view(manually_corrected_species)
view(manually_corrected_species)
view(manually_corrected_species)
library(tidyverse)
################################################################################
microsp_infection_sites <- read_csv('../../data/microsporidia_species_and_abstracts.csv',
show_col_types = F) %>%
select(species, title_abstract, hosts, infection_site) %>%
filter(!is.na(title_abstract))
################################################################################
merge_recorded_and_corrected <- Vectorize(function(recorded, absent, corrected) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
if (is.na(recorded)) {
recorded <- character(0)
} else {
recorded <- str_split(recorded, '; ')[[1]]
}
if (is.na(absent)) {
absent <- character(0)
} else {
absent <- str_split(absent, '; ')[[1]]
}
if (is.na(corrected)) {
corrected <- character(0)
} else {
corrected <- str_split(corrected, '; ')[[1]]
}
merged <- c(recorded[!(recorded %in% absent)], corrected)
if (length(merged) < 1) {
return(NA)
}
return(str_c(merged, collapse = '; '))
}, vectorize.args = c('recorded', 'absent', 'corrected'))
manually_corrected_species <- read_csv('../../data/manually_corrected_hosts_and_microsp.csv') %>%
select(species, species_cleaned, microsp_not_in_text, microsp_not_in_text_corrected,
title_abstract, hosts_cleaned, hosts_not_in_text,
hosts_not_in_text_corrected) %>%
mutate(species_final = merge_recorded_and_corrected(species_cleaned,
microsp_not_in_text,
microsp_not_in_text_corrected),
hosts_final = ifelse(!is.na(microsp_not_in_text),
microsp_not_in_text_corrected,
species_cleaned))
view(manually_corrected_species)
view(manually_corrected_species$species_final)
source("~/Desktop/microsporidia_text_mining/src/1_format_data/3_clean_infection_site_data.R", echo=TRUE)
view(microsp_infection_sites)
view(manually_corrected_species)
species_corrections[['Amblyospora dyxenoides (1)']]
library(tidyverse)
################################################################################
microsp_infection_sites <- read_csv('../../data/microsporidia_species_and_abstracts.csv',
show_col_types = F) %>%
select(species, title_abstract, hosts, infection_site) %>%
filter(!is.na(title_abstract))
################################################################################
merge_recorded_and_corrected <- Vectorize(function(recorded, absent, corrected) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
if (is.na(recorded)) {
recorded <- character(0)
} else {
recorded <- str_split(recorded, '; ')[[1]]
}
if (is.na(absent)) {
absent <- character(0)
} else {
absent <- str_split(absent, '; ')[[1]]
}
if (is.na(corrected)) {
corrected <- character(0)
} else {
corrected <- str_split(corrected, '; ')[[1]]
}
merged <- c(recorded[!(recorded %in% absent)], corrected)
if (length(merged) < 1) {
return(NA)
}
return(str_c(merged, collapse = '; '))
}, vectorize.args = c('recorded', 'absent', 'corrected'))
manually_corrected_species <- read_csv('../../data/manually_corrected_hosts_and_microsp.csv') %>%
select(species, species_cleaned, microsp_not_in_text, microsp_not_in_text_corrected,
title_abstract, hosts_cleaned, hosts_not_in_text,
hosts_not_in_text_corrected) %>%
mutate(species_final = ifelse(!is.na(microsp_not_in_text),
microsp_not_in_text_corrected,
species_cleaned),
hosts_final = merge_recorded_and_corrected(hosts_cleaned,
hosts_not_in_text,
hosts_not_in_text_corrected))
view(manually_corrected_species)
source("~/Desktop/microsporidia_text_mining/src/1_format_data/3_clean_infection_site_data.R", echo=TRUE)
colnames(microsp_infection_sites)
source("~/Desktop/microsporidia_text_mining/src/1_format_data/3_clean_infection_site_data.R", echo=TRUE)
view(microsp_infection_sites)
view(microsp_infection_sites)
view(manually_corrected_species)
source("~/Desktop/microsporidia_text_mining/src/1_format_data/3_clean_infection_site_data.R", echo=TRUE)
view(microsp_infection_sites %>% select(species, species_corrected, hosts_corrected))
library(tidyverse)
################################################################################
clean_host_data <- Vectorize(function(hosts) {
hosts <- str_split(hosts, '; ')[[1]]
hosts <- sapply(hosts, function(h) {str_remove(h, ' \\(.+')})
return(str_c(hosts, collapse = '; '))
})
microsp_infection_sites <- read_csv('../../data/microsporidia_species_and_abstracts.csv',
show_col_types = F) %>%
select(species, title_abstract, hosts, infection_site) %>%
filter(!is.na(title_abstract)) %>%
mutate(hosts = clean_host_data(hosts))
view(microsp_infection_sites)
source("~/Desktop/microsporidia_text_mining/src/1_format_data/3_clean_infection_site_data.R", echo=TRUE)
view(to_check)
view(microsp_infection_sites$hosts_corrected)
sanity_check <- microsp_infection_sites %>%
select(title_abstract, species_corrected, hosts_corrected)
view(sanity_check)
check_shit <- function(shit, text) {
shit <- str_split(shit, '; ')[[1]]
not_in_text <- shit[!str_detect(tolower(text), tolower(shit))]
return(str_c(not_in_text, collapse = '; '))
}
check_shit <- function(shit, text) {
shit <- str_split(shit, '; ')[[1]]
not_in_text <- shit[!str_detect(tolower(text), tolower(shit))]
return(str_c(not_in_text, collapse = '; '))
}
sanity_check <- sanity_check %>%
rowwise() %>%
aokd[wq1]
sanity_check <- sanity_check %>%
rowwise() %>%
mutate(species_not_in = check_shit(species_corrected, title_abstract),
hosts_not_in = check_shit(hosts_corrected, title_abstract))
view(sanity_check)
check_shit <- function(shit, text) {
shit <- str_split(shit, '; ')[[1]]
not_in_text <- shit[!str_detect(tolower(text), tolower(shit))]
if (length(not_in_text) == 0) {
return(NA)
}
return(str_c(not_in_text, collapse = '; '))
}
sanity_check <- sanity_check %>%
rowwise() %>%
mutate(species_not_in = check_shit(species_corrected, title_abstract),
hosts_not_in = check_shit(hosts_corrected, title_abstract))
view(sanity_check)
insanity <- filter(sanity_check, !is.na(species_not_in) | !is.na(hosts_not_in))
view(insanity)
insanity[32,]
insanity[32,]$title_abstract
view(manually_corrected_species)
get_abbrev <- function(name) {
if (str_detect(name, '\\d$') | length(str_split(name, ' ')[[1]]) == 1) {}
}
get_abbrev <- function(name) {
if (str_detect(name, '\\d$') | length(str_split(name, ' ')[[1]]) == 1) {
return(name)
}
name <- str_split(name, ' ')[[1]]
return(str_c(substr(name[1], 1, 1), '.', name[2]))
}
get_abbrev("NMicro 1")
get_abbrev("NMicro")
get_abbrev("Parathelohania teguldeti")
get_abbrev <- function(name) {
if (str_detect(name, '\\d$') | length(str_split(name, ' ')[[1]]) == 1) {
return(name)
}
name <- str_split(name, ' ')[[1]]
return(str_c(substr(name[1], 1, 1), '. ', name[2]))
}
get_abbrev("Parathelohania teguldeti")
get_abbrev("Xenopsylla hirtipes")
get_abbrev("Xenopsylla 1")
get_abbrev("Xenopsylla")
get_abbrev <- function(names) {
abbrevs <- c()
names <- str_split(names, '; ')
for (name in names) {
if (str_detect(name, '\\d$') | length(str_split(name, ' ')[[1]]) == 1) {
return(name)
}
name <- str_split(name, ' ')[[1]]
return(str_c(substr(name[1], 1, 1), '. ', name[2]))
}
get_abbrev <- function(names) {
abbrevs <- c()
names <- str_split(names, '; ')
for (name in names) {
if (str_detect(name, '\\d$') | length(str_split(name, ' ')[[1]]) == 1) {
abbrevs <- c(abbrevs, name)
}
abbrevs <- c(abbrevs, str_c(substr(name[1], 1, 1), '. ', name[2]))
}
return(str_c(abbrevs, collapse = '; '))
}
get_abbrev <- function(names) {
abbrevs <- c()
names <- str_split(names, '; ')
for (name in names) {
if (str_detect(name, '\\d$') | length(str_split(name, ' ')[[1]]) == 1) {
abbrevs <- c(abbrevs, name)
}
abbrevs <- c(abbrevs, str_c(substr(name[1], 1, 1), '. ', name[2]))
}
return(str_c(abbrevs, collapse = '; '))
}
get_abbrev('Hi')
asda
CD]1L32
get_abbrev <- function(names) {
abbrevs <- c()
names <- str_split(names, '; ')
for (name in names) {
if (str_detect(name, '\\d$') | length(str_split(name, ' ')[[1]]) == 1) {
abbrevs <- c(abbrevs, name)
}
abbrevs <- c(abbrevs, str_c(substr(name[1], 1, 1), '. ', name[2]))
}
return(str_c(abbrevs, collapse = '; '))
}
get_abbrev('Hi')
get_abbrev <- function(names) {
abbrevs <- c()
names <- str_split(names, '; ')
for (name in names) {
if (str_detect(name, '\\d$') | length(str_split(name, ' ')[[1]]) == 1) {
abbrevs <- c(abbrevs, name)
}
abbrevs <- c(abbrevs, str_c(substr(name[1], 1, 1), '. ', name[2]))
}
return(str_c(abbrevs, collapse = '; '))
}
str_split('Hi', '; ')[[1]]
get_abbrev <- function(names) {
abbrevs <- c()
names <- str_split(names, '; ')[[1]]
for (name in names) {
if (str_detect(name, '\\d$') | length(str_split(name, ' ')[[1]]) == 1) {
abbrevs <- c(abbrevs, name)
}
abbrevs <- c(abbrevs, str_c(substr(name[1], 1, 1), '. ', name[2]))
}
return(str_c(abbrevs, collapse = '; '))
}
get_abbrev('Hi')
get_abbrev <- function(names) {
abbrevs <- c()
names <- str_split(names, '; ')[[1]]
for (name in names) {
if (str_detect(name, '\\d$') | length(str_split(name, ' ')[[1]]) == 1) {
abbrevs <- c(abbrevs, name)
}
abbrevs <- c(abbrevs, str_c(substr(name[1], 1, 1), '. ', name[2]))
}
return(str_c(abbrevs, collapse = '; '))
}
get_abbrev('Hi')
str_split('Hi', '; ')[[1]]
get_abbrev <- function(names) {
abbrevs <- c()
names <- str_split(names, '; ')[[1]]
for (name in names) {
if (str_detect(name, '\\d$') | length(str_split(name, ' ')[[1]]) == 1) {
abbrevs <- c(abbrevs, name)
}
abbrevs <- c(abbrevs, str_c(substr(name[1], 1, 1), '. ', name[2]))
}
return(str_c(abbrevs, collapse = '; '))
}
abbrevs <- c()
names <- str_split('Hi', '; ')[[1]]
for (name in names) {
if (str_detect(name, '\\d$') | length(str_split(name, ' ')[[1]]) == 1) {
abbrevs <- c(abbrevs, name)
}
abbrevs <- c(abbrevs, str_c(substr(name[1], 1, 1), '. ', name[2]))
}
abbrevs
get_abbrev <- function(names) {
abbrevs <- c()
names <- str_split(names, '; ')[[1]]
for (name in names) {
if (str_detect(name, '\\d$') | length(str_split(name, ' ')[[1]]) == 1) {
abbrevs <- c(abbrevs, name)
} else {
abbrevs <- c(abbrevs, str_c(substr(name[1], 1, 1), '. ', name[2]))
}
}
return(str_c(abbrevs, collapse = '; '))
}
get_abbrev('Hi')
get_abbrev('Hi 1')
get_abbrev('Hi 1; Yo there')
get_abbrev <- function(names) {
abbrevs <- c()
names <- str_split(names, '; ')[[1]]
for (name in names) {
if (str_detect(name, '\\d$') | length(str_split(name, ' ')[[1]]) == 1) {
abbrevs <- c(abbrevs, name)
} else {
s = str_split(name, ' ')
abbrevs <- c(abbrevs, str_c(substr(s[1], 1, 1), '. ', s[2]))
}
}
return(str_c(abbrevs, collapse = '; '))
}
get_abbrev('Hi 1; Yo there')
get_abbrev <- function(names) {
abbrevs <- c()
names <- str_split(names, '; ')[[1]]
for (name in names) {
if (str_detect(name, '\\d$') | length(str_split(name, ' ')[[1]]) == 1) {
abbrevs <- c(abbrevs, name)
} else {
s = str_split(name, ' ')[[1]]
abbrevs <- c(abbrevs, str_c(substr(s[1], 1, 1), '. ', s[2]))
}
}
return(str_c(abbrevs, collapse = '; '))
}
get_abbrev('Hi 1; Yo there')
get_abbrev('Hi 1; Yo there; Hoif; So bro')
get_abbrev <- function(names) {
if (is.na(names)) {
return(NA)
}
abbrevs <- c()
names <- str_split(names, '; ')[[1]]
for (name in names) {
if (str_detect(name, '\\d$') | length(str_split(name, ' ')[[1]]) == 1) {
abbrevs <- c(abbrevs, name)
} else {
s = str_split(name, ' ')[[1]]
abbrevs <- c(abbrevs, str_c(substr(s[1], 1, 1), '. ', s[2]))
}
}
return(str_c(abbrevs, collapse = '; '))
}
insanity_2 <- insanity %>%
rowwise() %>%
mutate(species_2 = check_shit(get_abbrev(species_not_in), title_abstract),
hosts_2 = check_shit(get_abbrev(hosts_not_in), title_abstract))
view(insanity_2)
true_insanity <- insanity_2 %>%
filter(is.na(species_2) | !is.na(hosts_2))
view(true_insanity)
true_insanity <- insanity_2 %>%
filter(!is.na(species_2) | !is.na(hosts_2))
view(true_insanity)
write_csv(true_insanity, 'weird_shit.csv')
txt = "Light and electron microscope studies on three new species of microsporidia from saltmarsh mosquitoes in Australia. Descriptions are given of three microsporidians found parasitising larvae of culicine mosquitoes in south-east Queensland, Australia. Two, Duboscqia aediphaga n.sp. and Microsporidium lotaensis n.sp. were recovered from larvae of Aedes (Ochlerotatus) vigilax (Skuse), and a third, Amblyospora pinensis n.sp., from Culex sitiens Wiedemann. The three species were studied by light microscopy and scanning and transmission electron microscopy. We believe this to be the first detailed account of the ultrastructure of a species of Duboscqia Perez."
str_detect(txt, 'Aedes (Ochlerotatus) vigilax')
txt
str_detect(txt, 'Aedes (Ochlerotatus) vigilax')
txt
str_detect(txt, 'Aedes \\(Ochlerotatus\\) vigilax')
view(insanity)
source("~/Desktop/microsporidia_text_mining/src/1_format_data/3_clean_infection_site_data.R", echo=TRUE)
view(microsp_infection_sites)
library(tidyverse)
################################################################################
clean_host_data <- Vectorize(function(hosts) {
hosts <- str_split(hosts, '; ')[[1]]
hosts <- sapply(hosts, function(h) {str_remove(h, ' \\(.+')})
return(str_c(hosts, collapse = '; '))
})
microsp_infection_sites <- read_csv('../../data/microsporidia_species_and_abstracts.csv',
show_col_types = F) %>%
select(species, title_abstract, hosts, infection_site) %>%
filter(!is.na(title_abstract)) %>%
mutate(hosts = clean_host_data(hosts))
################################################################################
merge_recorded_and_corrected <- Vectorize(function(recorded, absent, corrected) {
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
if (is.na(recorded)) {
recorded <- character(0)
} else {
recorded <- str_split(recorded, '; ')[[1]]
}
if (is.na(absent)) {
absent <- character(0)
} else {
absent <- str_split(absent, '; ')[[1]]
}
if (is.na(corrected)) {
corrected <- character(0)
} else {
corrected <- str_split(corrected, '; ')[[1]]
}
merged <- c(recorded[!(recorded %in% absent)], corrected)
if (length(merged) < 1) {
return(NA)
}
return(str_c(merged, collapse = '; '))
}, vectorize.args = c('recorded', 'absent', 'corrected'))
manually_corrected_species <- read_csv('../../data/manually_corrected_hosts_and_microsp.csv') %>%
select(species, species_cleaned, microsp_not_in_text, microsp_not_in_text_corrected,
title_abstract, hosts_cleaned, hosts_not_in_text,
hosts_not_in_text_corrected) %>%
mutate(species_final = ifelse(!is.na(microsp_not_in_text),
microsp_not_in_text_corrected,
species_cleaned),
hosts_final = merge_recorded_and_corrected(hosts_cleaned,
hosts_not_in_text,
hosts_not_in_text_corrected))
species_corrections <- new.env()
for (i in 1 : nrow(manually_corrected_species)) {
species_corrections[[manually_corrected_species$species[i]]] <-
c(
unname(manually_corrected_species$species_final[i]),
unname(manually_corrected_species$hosts_final[i])
)
}
species_corrections[['Duboscqia aediphaga']]
species_corrections[['Microsporidium 1']]
species_corrections[['Microsporidium 2']]
species_corrections[['Microsporidium lotaensis']]
microsp_infection_sites <- microsp_infection_sites %>%
rowwise() %>%
mutate(species_corrected = ifelse(species %in% manually_corrected_species$species,
species_corrections[[species]][1],
str_remove(species, ' (\\d+|\\(.+\\))$')),
hosts_corrected = ifelse(species %in% manually_corrected_species$species,
species_corrections[[species]][2],
hosts)) %>%
select(species_corrected, hosts_corrected, infection_site, title_abstract, everything())
view(microsp_infection_sites)
species_corrections['Microsporidium 1']
species_corrections[['Microsporidium 1']]
species_corrections[['Microsporidium 1']][1]
manually_corrected_species$species
manually_corrected_species$species
view(microsp_infection_sites)
species_corrections[['Microsporidium 2']]
# clean-up and shit
parenthesized_info_to_exclude <- c('main', 'except', '\\d+', 'of ', 'in ',
'primary', 'larva', 'adult', 'male', 'spore',
'infect')
get_parenthesized_info <- function(infection_site) {
infection_site <- str_split(infection_site, '; ')[[1]]
parenthesized_info <- sapply(infection_site, function(s) {str_extract(s, '(?<=\\().+(?=\\))')})
parenthesized_info <- parenthesized_info[!is.na(parenthesized_info)]
parenthesized_info_filtered <- c()
for (info in parenthesized_info) {
info <- str_split(info, ', ')[[1]]
for (subinfo in info) {
if (!any(str_detect(subinfo, parenthesized_info_to_exclude))) {
parenthesized_info_filtered <- append(parenthesized_info_filtered, subinfo)
}
}
}
return_str = str_c(parenthesized_info_filtered, collapse = '; ')
return(ifelse(return_str == '', NA, return_str))
}
remove_parenthesized_info <- function(infection_site) {
infection_site <- str_split(infection_site, '; ')
infection_site <- sapply(infection_site, function(s) {str_remove(s, ' \\(.+')})
return_str = str_c(infection_site, collapse = '; ')
return(ifelse(return_str == '', NA, return_str))
}
get_entries_not_in_text <- Vectorize(function(entries, text) {
entries <- str_split(entries, '; ')[[1]]
not_in_text <- entries[!str_detect(tolower(text), tolower(entries))]
return_str = str_c(not_in_text, collapse = '; ')
return(ifelse(return_str == '', NA, return_str))
}, vectorize.args = c('entries', 'text'))
microsp_infection_sites <- microsp_infection_sites %>%
mutate(infection_site_parenthesized = get_parenthesized_info(infection_site),
infection_site = remove_parenthesized_info(infection_site),
parenthesized_not_in_text = get_entries_not_in_text(infection_site_parenthesized,
title_abstract),
infection_site_not_in_text = get_entries_not_in_text(infection_site,
title_abstract),
parenthesized_corrected = NA,
infection_site_corrected = NA) %>%
select(species, title_abstract, species_corrected, hosts_corrected, infection_site,
infection_site_parenthesized, infection_site_not_in_text,
parenthesized_not_in_text, infection_site_corrected,
parenthesized_corrected) %>%
filter(!(species_corrected %in% c('Microsporidium 1', 'Microsporidium 2')))
view(microsp_infection_sites)
to_check <- microsp_infection_sites %>%
filter(!is.na(parenthesized_not_in_text) | !is.na(infection_site_not_in_text))
write_csv(to_check, 'manually_corrected_infection_sites.csv')
colnames(to_check)
to_check <- microsp_infection_sites %>%
filter(!is.na(parenthesized_not_in_text) | !is.na(infection_site_not_in_text) | str_detect(hosts_corrected, ';'))
